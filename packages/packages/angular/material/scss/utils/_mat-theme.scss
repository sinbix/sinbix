$matHues: 50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 'A100', 'A200',
  'A400', 'A700';

@mixin smat-theme(
  $primary,
  $accent,
  $warn: mat-palette($mat-red),
  $background: $mat-light-theme-background,
  $foreground: $mat-light-theme-foreground,
  $extra: null
) {
  $theme: mat-light-theme($primary, $accent, $warn);

  $theme: map-merge(
    $theme,
    (
      'background': $background,
      'foreground': $foreground,
    )
  );

  @include angular-material-theme($theme);

  $palettes: (
    'primary': $primary,
    'accent': $accent,
    'warn': $warn,
  );

  @if ($extra) {
    $palettes: map-merge($palettes, $extra);
  }

  @include colors-palettes($palettes);
  @include colors-theme($theme);
}

@function hexToRGBString($hexColor) {
  @return #{red($hexColor)}, #{green($hexColor)}, #{blue($hexColor)};
}

@mixin generate-color-var($name, $color) {
  --#{inspect($name)}: #{inspect($color)};
  --#{inspect($name)}-rgb: #{inspect(hexToRGBString($color))};
}

@mixin generate-color-vars($name, $color, $contrast) {
  @include generate-color-var(color-#{$name}, $color);
  @include generate-color-var(contrast-#{$name}, $contrast);
}

@mixin colors-palettes($palettes) {
  @each $paletteName, $palette in $palettes {
    @if ($palette) {
      $contrasts: map-get($palette, 'contrast');

      @each $hue in $matHues {
        $color: map-get($palette, $hue);
        $contrast: map-get($contrasts, $hue);

        $name: #{$paletteName}-#{$hue};

        @if ($color != null and $contrast != null) {
          @include generate-color-vars($name, $color, $contrast);

          @if (
            $hue ==
              500 and
              $paletteName !=
              'primary' and
              $paletteName !=
              'accent' and
              $paletteName !=
              'warn'
          ) {
            @include generate-color-vars($paletteName, $color, $contrast);
          }

          @if (
            $paletteName ==
              'primary' or
              $paletteName ==
              'accent' or
              $paletteName ==
              'warn'
          ) {
            $color: map-get($palette, 'default');
            $contrast: map-get($palette, 'default-contrast');

            @include generate-color-vars($paletteName, $color, $contrast);
          }
        }
      }
    }
  }
}

@mixin colors-theme($theme) {
  $background: map-get($theme, 'background');
  $foreground: map-get($theme, 'foreground');

  $color: map-get($background, 'background');
  $contrast: map-get($foreground, 'base');

  @include generate-color-vars('theme', $color, $contrast);
  @include smat-el('theme');
}
